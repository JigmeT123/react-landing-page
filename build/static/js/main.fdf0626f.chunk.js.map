{"version":3,"sources":["Components/navbar.js","Components/about.js","Components/contact.js","Components/home.js","Components/post.js","App.js","serviceWorker.js","reducers/rootReducers.js","index.js"],"names":["NavBar","className","to","Component","About","Contact","Home","posts","this","props","arr","length","map","post","key","id","title","body","connect","state","Post","handleClick","e","deletePost","history","push","onClick","ownProps","match","params","post_id","find","res","dispatch","type","App","exact","path","component","Boolean","window","location","hostname","initState","reducer","action","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAiBeA,E,uKAZP,OACI,yBAAKC,UAAU,OACX,uBAAGA,UAAU,cAAb,WACA,wBAAIA,UAAU,SACV,4BAAI,kBAAC,IAAD,CAASC,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,kB,GARHC,aCQNC,EARD,WACV,OACI,yBAAKH,UAAU,aACX,qDACA,iMCIGI,EARC,WACZ,OACI,yBAAKJ,UAAU,aACX,uDACA,iM,QCJNK,E,uKACO,IACEC,EAASC,KAAKC,MAAdF,MACDG,EAAMH,EAAMI,OACdJ,EAAMK,KAAI,SAAAC,GACN,OACA,yBAAKZ,UAAU,OAAOa,IAAKD,EAAKE,IAC5B,yBAAKd,UAAU,gBACf,kBAAC,IAAD,CAASC,GAAI,IAAKW,EAAKE,IAAI,yBAAKd,UAAU,cAAcY,EAAKG,QAClE,2BAAIH,EAAKI,WAMZ,yBAAKhB,UAAU,UAAf,0BAEJ,OAEI,yBAAKA,UAAU,aACVS,O,GApBEP,aA+BJe,eANU,SAACC,GACtB,MAAM,CACFZ,MAAOY,EAAMZ,SAINW,CAA0BZ,GC/BnCc,E,4MACFC,YAAc,SAACC,GACX,EAAKb,MAAMc,WAAW,EAAKd,MAAMF,MAAMQ,IACvC,EAAKN,MAAMe,QAAQC,KAAK,M,uDAElB,IACClB,EAASC,KAAKC,MAAdF,MACDM,EAAON,EAEL,yBAAKN,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,cAAcM,EAAMS,OACnC,2BAAIT,EAAMU,OAEd,yBAAKhB,UAAU,UACX,4BAAQA,UAAU,UAAUyB,QAASlB,KAAKa,aAA1C,YAKT,yBAAKpB,UAAU,UAAf,gBAEH,OACI,yBAAKA,UAAU,aACVY,O,GAxBFV,aA6CJe,eAhBU,SAACC,EAAOQ,GAC7B,IAAIZ,EAAKY,EAASC,MAAMC,OAAOC,QAC/B,MAAO,CACHvB,MAAOY,EACFZ,MACAwB,MAAK,SAAAC,GACF,OAAOA,EAAIjB,KAAOA,SAKN,SAACkB,GACzB,MAAO,CACHV,WAAY,SAACR,GAAD,OAAQkB,EAAS,CAACC,KAAM,cAAenB,WAG5CG,CAA+CE,GCtB/Ce,E,uKAjBP,OACI,kBAAC,IAAD,KACI,yBAAKlC,UAAU,OAEX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAQ+B,KAAK,SAASC,UAAWlC,IACjC,kBAAC,IAAD,CAAQiC,KAAK,WAAWC,UAAWjC,IACnC,kBAAC,IAAD,CAAOgC,KAAK,YAAYC,UAAWlB,W,GAXrCjB,aCKEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2D,oBClBAe,EAAY,CACdpC,MAAO,CACH,CAACQ,GAAI,IAAKC,MAAO,uBAAwBC,KAAM,mOAC/C,CAACF,GAAI,IAAKC,MAAO,yBAA0BC,KAAM,mOACjD,CAACF,GAAI,IAAKC,MAAO,2BAA4BC,KAAM,qOAkB5C2B,EAdC,WAA8B,IAA7BzB,EAA4B,uDAAtBwB,EAAWE,EAAW,uCACzC,GAAiB,gBAAdA,EAAOX,KAAqB,CAC5B,IAAIxB,EAAMS,EAAMZ,MAAMuC,QAAO,SAAAd,GACzB,OAAOA,EAAIjB,KAAO8B,EAAO9B,MAE7B,OAAO,2BACHI,GADJ,IAECZ,MAAOG,IAGX,OAAOS,GCVL4B,EAAQC,YAAYJ,GAC1BK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GAAO,kBAAC,EAAD,QAE1BK,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fdf0626f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {NavLink} from 'react-router-dom';\n\nclass NavBar extends Component{\n    render(){\n        return(\n            <nav className=\"nav\">\n                <a className='brand-logo'>Pokemon</a>\n                <ul className=\"right\">\n                    <li><NavLink to=\"/\">Home</NavLink></li>\n                    <li><NavLink to=\"/about\">About</NavLink></li>\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\n                </ul>\n            </nav>\n        );\n    }\n}\nexport default NavBar;","import React from 'react';\n\n\nconst About = () => {\n    return (\n        <div className='container'>\n            <h1>This is my About Page</h1>\n            <p>Deserunt ea anim ullamco dolore aliquip excepteur irure. Qui cillum tempor nulla proident magna commodo irure. Consectetur sunt quis ut officia ipsum non Lorem.</p>\n        </div>\n    );\n}\nexport default About;","import React from 'react';\n\n\nconst Contact = () => {\n    return (\n        <div className='container'>\n            <h1>This is my Contact Page</h1>\n            <p>Deserunt ea anim ullamco dolore aliquip excepteur irure. Qui cillum tempor nulla proident magna commodo irure. Consectetur sunt quis ut officia ipsum non Lorem.</p>\n        </div>\n    );\n}\nexport default Contact;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {NavLink} from 'react-router-dom';\nclass Home extends Component{\n    render(){\n        const {posts} = this.props;\n        const arr = posts.length?(\n            posts.map(post=>{\n                return(\n                <div className=\"card\" key={post.id}>\n                    <div className=\"card-content\">\n                    <NavLink to={'/'+ post.id}><div className=\"card-title\">{post.title}</div></NavLink>\n               <p>{post.body}</p>\n                </div>\n            </div>\n                );\n            })\n        ):(\n            <div className='center'>Content not yet posted</div>\n        )\n        return(\n            \n            <div className=\"container\">\n                {arr}\n            </div>\n        )\n    }\n}\nconst mapsStateToProps = (state) => {\n    return{\n        posts: state.posts\n    }\n}\n\nexport default connect(mapsStateToProps)(Home);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass Post extends Component {\n    handleClick = (e) => {\n        this.props.deletePost(this.props.posts.id);\n        this.props.history.push('/');\n    }\n    render() {\n        const {posts} = this.props;\n        const post = posts\n            ? (\n                <div className=\"post card\">\n                    <div className=\"card-content\">\n                        <div className=\"card-title\">{posts.title}</div>\n                        <p>{posts.body}</p>\n                    </div>\n                    <div className='center'>\n                        <button className=\"btn red\" onClick={this.handleClick}>DELETE</button>\n                    </div>\n\n                </div>\n            )\n            : (<div className='center'>Loading Post</div>);\n\n            return (\n                <div className=\"container\">\n                    {post}\n                </div>\n            )\n    }\n}\nconst mapsStateToProps = (state, ownProps) => {\n    let id = ownProps.match.params.post_id;\n    return {\n        posts: state\n            .posts\n            .find(res => {\n                return res.id === id;\n            })\n    }\n}\n\nconst mapsDispatchToProps = (dispatch) => {\n    return {\n        deletePost: (id)=> (dispatch({type: 'DELETE_POST', id}))\n    }\n}\nexport default connect(mapsStateToProps, mapsDispatchToProps)(Post);","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport NavBar from './Components/navbar';\nimport About from './Components/about';\nimport Contact from './Components/contact';\nimport Home from './Components/home';\nimport Post from './Components/post'\nclass App extends Component{\n    render(){\n        return(\n            <BrowserRouter>\n                <div className=\"app\">\n                    \n                    <NavBar />\n                    <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route  path=\"/about\" component={About} />\n                    <Route  path=\"/contact\" component={Contact} />\n                    <Route path='/:post_id' component={Post}/>\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    posts: [\n        {id: '1', title: 'Squirtle Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},\n        {id: '2', title: 'Charmander Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},\n        {id: '3', title: 'a Helix Fossil was Found', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'}\n    ]\n}\n\nconst reducer = (state=initState, action) => {\n    if(action.type===\"DELETE_POST\"){\n       let arr = state.posts.filter(res=>{\n           return res.id !== action.id;\n       })\n       return {\n        ...state,\n        posts: arr\n    };\n    }\n    return state;\n   \n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './reducers/rootReducers'\nconst store = createStore(reducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}